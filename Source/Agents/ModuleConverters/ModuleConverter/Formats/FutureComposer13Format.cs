/******************************************************************************/
/* This source, or parts thereof, may be used in any software as long the     */
/* license of NostalgicPlayer is keep. See the LICENSE file for more          */
/* information.                                                               */
/******************************************************************************/
using System.IO;
using Polycode.NostalgicPlayer.Kit.Bases;
using Polycode.NostalgicPlayer.Kit.Containers;
using Polycode.NostalgicPlayer.Kit.Streams;
using Polycode.NostalgicPlayer.Kit.Utility;

namespace Polycode.NostalgicPlayer.Agent.ModuleConverter.ModuleConverter.Formats
{
	/// <summary>
	/// Can convert Future Composer 1.0 - 1.3 to Future Composer 1.4 format
	/// </summary>
	internal class FutureComposer13Format : ModuleConverterAgentBase
	{
		#region Tables
		// Wave table lengths
		private static readonly byte[] waveLength =
		{
			0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x10, 0x08, 0x10, 0x10, 0x08, 0x08, 0x18, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

		// Wave tables
		private static readonly byte[] waveTables =
		{
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 0
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0x3f, 0x37, 0x2f, 0x27, 0x1f, 0x17, 0x0f, 0x07,
			0xff, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 1
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0x37, 0x2f, 0x27, 0x1f, 0x17, 0x0f, 0x07,
			0xff, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 2
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0x2f, 0x27, 0x1f, 0x17, 0x0f, 0x07,
			0xff, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 3
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0x27, 0x1f, 0x17, 0x0f, 0x07,
			0xff, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 4
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0x1f, 0x17, 0x0f, 0x07,
			0xff, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 5
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x17, 0x0f, 0x07,
			0xff, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 6
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x0f, 0x07,
			0xff, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 7
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x90, 0x07,
			0xff, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 8
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x90, 0x88,
			0xff, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 9
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x90, 0x88,
			0x80, 0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 10
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x90, 0x88,
			0x80, 0x88, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 11
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x90, 0x88,
			0x80, 0x88, 0x90, 0x17, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 12
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x90, 0x88,
			0x80, 0x88, 0x90, 0x98, 0x1f, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 13
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x90, 0x88,
			0x80, 0x88, 0x90, 0x98, 0xa0, 0x27, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 14
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x90, 0x88,
			0x80, 0x88, 0x90, 0x98, 0xa0, 0xa8, 0x2f, 0x37,
			0xc0, 0xc0, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,			// 15
			0x00, 0xf8, 0xf0, 0xe8, 0xe0, 0xd8, 0xd0, 0xc8,
			0xc0, 0xb8, 0xb0, 0xa8, 0xa0, 0x98, 0x90, 0x88,
			0x80, 0x88, 0x90, 0x98, 0xa0, 0xa8, 0xb0, 0x37,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 16
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 17
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 18
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 19
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 20
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 21
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 22
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x7f, 0x7f,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 23
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x7f,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 24
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 25
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 26
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 27
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 28
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,			// 29
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
			0x81, 0x81, 0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,			// 30
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,			// 31
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,			// 32
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f,			// 33
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f,			// 34
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f,			// 35
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f,			// 36
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x80, 0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,			// 37
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,			// 38
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x80, 0x80, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,			// 39
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x80, 0x80, 0x90, 0x98, 0xa0, 0xa8, 0xb0, 0xb8,			// 40
			0xc0, 0xc8, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,
			0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
			0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x7f,
			0x80, 0x80, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0,			// 41
			0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
			0x45, 0x45, 0x79, 0x7d, 0x7a, 0x77, 0x70, 0x66,			// 42
			0x61, 0x58, 0x53, 0x4d, 0x2c, 0x20, 0x18, 0x12,
			0x04, 0xdb, 0xd3, 0xcd, 0xc6, 0xbc, 0xb5, 0xae,
			0xa8, 0xa3, 0x9d, 0x99, 0x93, 0x8e, 0x8b, 0x8a,
			0x45, 0x45, 0x79, 0x7d, 0x7a, 0x77, 0x70, 0x66,			// 43
			0x5b, 0x4b, 0x43, 0x37, 0x2c, 0x20, 0x18, 0x12,
			0x04, 0xf8, 0xe8, 0xdb, 0xcf, 0xc6, 0xbe, 0xb0,
			0xa8, 0xa4, 0x9e, 0x9a, 0x95, 0x94, 0x8d, 0x83,
			0x00, 0x00, 0x40, 0x60, 0x7f, 0x60, 0x40, 0x20, 		// 44
			0x00, 0xe0, 0xc0, 0xa0, 0x80, 0xa0, 0xc0, 0xe0,
			0x00, 0x00, 0x40, 0x60, 0x7f, 0x60, 0x40, 0x20,			// 45
			0x00, 0xe0, 0xc0, 0xa0, 0x80, 0xa0, 0xc0, 0xe0,
			0x80, 0x80, 0x90, 0x98, 0xa0, 0xa8, 0xb0, 0xb8,			// 46
			0xc0, 0xc8, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,
			0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
			0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x7f,
			0x80, 0x80, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0,
			0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70
		};
		#endregion

		#region IModuleConverterAgent implementation
		/********************************************************************/
		/// <summary>
		/// Test the file to see if it could be identified
		/// </summary>
		/********************************************************************/
		public override AgentResult Identify(PlayerFileInfo fileInfo)
		{
			ModuleStream moduleStream = fileInfo.ModuleStream;

			// Check the module size
			long fileSize = moduleStream.Length;
			if (fileSize < 100)
				return AgentResult.Unknown;

			// Check the mark
			moduleStream.Seek(0, SeekOrigin.Begin);

			if (moduleStream.ReadMark() != "SMOD")
				return AgentResult.Unknown;

			// Skip the song length
			moduleStream.Seek(4, SeekOrigin.Current);

			// Check the offset pointers
			for (int i = 0; i < 8; i++)
			{
				if (moduleStream.Read_B_UINT32() > fileSize)
					return AgentResult.Unknown;
			}

			return AgentResult.Ok;
		}



		/********************************************************************/
		/// <summary>
		/// Convert the module and store the result in the stream given
		/// </summary>
		/********************************************************************/
		public override AgentResult Convert(PlayerFileInfo fileInfo, ConverterStream converterStream, out string errorMessage)
		{
			errorMessage = string.Empty;

			ModuleStream moduleStream = fileInfo.ModuleStream;

			uint[] offsetsAndLength = new uint[8];
			uint[] newOffsetsAndLength = new uint[8];

			// Start to write the ID mark
			converterStream.WriteMark("FC14");
			moduleStream.Seek(4, SeekOrigin.Begin);

			// Copy the sequence length and make it even
			uint seqLength = moduleStream.Read_B_UINT32();
			if ((seqLength % 2) != 0)
				converterStream.Write_B_UINT32(seqLength + 1);
			else
				converterStream.Write_B_UINT32(seqLength);

			// Read the offsets
			moduleStream.ReadArray_B_UINT32s(offsetsAndLength, 0, 8);
			converterStream.Seek(8 * 4, SeekOrigin.Current);

			// Copy the sample information
			ushort[] sampleLengths = new ushort[10];
			for (int i = 0; i < 10; i++)
			{
				sampleLengths[i] = moduleStream.Read_B_UINT16();
				converterStream.Write_B_UINT16(sampleLengths[i]);
				converterStream.Write_B_UINT16(moduleStream.Read_B_UINT16());
				converterStream.Write_B_UINT16(moduleStream.Read_B_UINT16());
			}

			if (moduleStream.EndOfStream)
			{
				errorMessage = Resources.IDS_ERR_LOADING_HEADER;
				return AgentResult.Error;
			}

			// Write the wave table lengths
			converterStream.Write(waveLength, 0, 80);

			// Copy the sequences
			StreamHelper.CopyDataForceLength(moduleStream, converterStream, (int)seqLength);

			// Copy the patterns
			newOffsetsAndLength[0] = (uint)converterStream.Position;
			if ((newOffsetsAndLength[0] % 2) != 0)
			{
				// Odd offset, make it even
				newOffsetsAndLength[0]++;
				converterStream.Write_UINT8(0);
			}

			newOffsetsAndLength[1] = offsetsAndLength[1];

			// Allocate buffer to hold the patterns
			byte[] pattBuf = new byte[offsetsAndLength[1]];

			// Load the pattern data into the buffer
			moduleStream.Seek(offsetsAndLength[0], SeekOrigin.Begin);
			moduleStream.ReadInto(pattBuf, 0, (int)offsetsAndLength[1]);

			// Scan the pattern data after the portamento flags
			// and double it's data
			for (int i = 1; i < offsetsAndLength[1] - 2; i += 2)
			{
				if ((pattBuf[i] & 0x80) != 0)
					pattBuf[i + 2] = (byte)((((pattBuf[i + 2] & 0x1f) * 2) & 0x1f) | (pattBuf[i + 2] & 0x20));
			}

			// Write the patterns
			converterStream.Write(pattBuf, 0, (int)offsetsAndLength[1]);

			// Copy the frequency sequences
			newOffsetsAndLength[2] = (uint)converterStream.Position;
			newOffsetsAndLength[3] = offsetsAndLength[3];

			moduleStream.Seek(offsetsAndLength[2], SeekOrigin.Begin);
			StreamHelper.CopyDataForceLength(moduleStream, converterStream, (int)offsetsAndLength[3]);

			// Copy the volume sequences
			newOffsetsAndLength[4] = (uint)converterStream.Position;
			newOffsetsAndLength[5] = offsetsAndLength[5];

			moduleStream.Seek(offsetsAndLength[4], SeekOrigin.Begin);
			StreamHelper.CopyDataForceLength(moduleStream, converterStream, (int)offsetsAndLength[5]);

			if (moduleStream.EndOfStream)
			{
				errorMessage = Resources.IDS_ERR_LOADING_PATTERNS;
				return AgentResult.Error;
			}

			// Copy the sample data
			newOffsetsAndLength[6] = (uint)converterStream.Position;
			moduleStream.Seek(offsetsAndLength[6], SeekOrigin.Begin);

			for (int i = 0; i < 10; i++)
			{
				int length = sampleLengths[i] * 2;

				if (length != 0)
				{
					// Check to see if we miss too much from the last sample
					if (moduleStream.Length - moduleStream.Position < (length - 256))
					{
						errorMessage = Resources.IDS_ERR_LOADING_SAMPLES;
						return AgentResult.Error;
					}

					moduleStream.SetSampleDataInfo(i, length);
					converterStream.WriteSampleDataMarker(i, length);
				}

				// Write pad bytes
				converterStream.Write_B_UINT16(0);
			}

			// Write the wave tables
			newOffsetsAndLength[7] = (uint)converterStream.Position;
			converterStream.Write(waveTables, 0, waveTables.Length);

			// Seek back and write the offsets and lengths
			converterStream.Seek(8, SeekOrigin.Begin);
			converterStream.WriteArray_B_UINT32s(newOffsetsAndLength, 8);

			return AgentResult.Ok;
		}
		#endregion
	}
}
