//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Polycode.NostalgicPlayer.Agent.Player.SoundControl {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Polycode.NostalgicPlayer.Agent.Player.SoundControl.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Holger Gehrmann.
        ///Converted to C# by Thomas Neumann based on the EaglePlayer by Wanted Team.
        ///
        ///This format is used in different games. The file format is the same for all versions, but there are different versions of the player where the main difference is how the track data is parsed and processed. Since the file format is the same, the player has hardcoded the player version needed for the different modules..
        /// </summary>
        internal static string IDS_DESCRIPTION {
            get {
                return ResourceManager.GetString("IDS_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sound Control.
        /// </summary>
        internal static string IDS_NAME {
            get {
                return ResourceManager.GetString("IDS_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Holger Gehrmann.
        ///Converted to C# by Thomas Neumann based on the EaglePlayer by Wanted Team.
        ///
        ///This format is used in different games. The file format is the same for all versions and this one is the oldest. It is very simple with track based position list and can only play samples with no effects..
        /// </summary>
        internal static string IDS_SC_DESCRIPTION_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_SC_DESCRIPTION_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Holger Gehrmann.
        ///Converted to C# by Thomas Neumann based on the EaglePlayer by Wanted Team.
        ///
        ///This format is used in different games. The file format is the same for all versions, but has been extended in this version to include instruments holding sample commands and envelopes. This means instead of playing a sample when playing a note, the player will then play a list of sample commands..
        /// </summary>
        internal static string IDS_SC_DESCRIPTION_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_SC_DESCRIPTION_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Holger Gehrmann.
        ///Converted to C# by Thomas Neumann based on the EaglePlayer by Wanted Team.
        ///
        ///This format is used in different games. The file format is the same for all versions, but has been extended in this version to include instruments holding sample commands and envelopes. This means instead of playing a sample when playing a note, the player will then play a list of sample commands..
        /// </summary>
        internal static string IDS_SC_DESCRIPTION_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_SC_DESCRIPTION_AGENT3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read module instruments.
        /// </summary>
        internal static string IDS_SC_ERR_LOADING_INSTRUMENTS {
            get {
                return ResourceManager.GetString("IDS_SC_ERR_LOADING_INSTRUMENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read module position list.
        /// </summary>
        internal static string IDS_SC_ERR_LOADING_POSITIONLIST {
            get {
                return ResourceManager.GetString("IDS_SC_ERR_LOADING_POSITIONLIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module sample information.
        /// </summary>
        internal static string IDS_SC_ERR_LOADING_SAMPLEINFO {
            get {
                return ResourceManager.GetString("IDS_SC_ERR_LOADING_SAMPLEINFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module samples.
        /// </summary>
        internal static string IDS_SC_ERR_LOADING_SAMPLES {
            get {
                return ResourceManager.GetString("IDS_SC_ERR_LOADING_SAMPLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read module tracks.
        /// </summary>
        internal static string IDS_SC_ERR_LOADING_TRACKS {
            get {
                return ResourceManager.GetString("IDS_SC_ERR_LOADING_TRACKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of positions:.
        /// </summary>
        internal static string IDS_SC_INFODESCLINE0 {
            get {
                return ResourceManager.GetString("IDS_SC_INFODESCLINE0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used tracks:.
        /// </summary>
        internal static string IDS_SC_INFODESCLINE1 {
            get {
                return ResourceManager.GetString("IDS_SC_INFODESCLINE1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used samples:.
        /// </summary>
        internal static string IDS_SC_INFODESCLINE2 {
            get {
                return ResourceManager.GetString("IDS_SC_INFODESCLINE2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playing positions:.
        /// </summary>
        internal static string IDS_SC_INFODESCLINE3 {
            get {
                return ResourceManager.GetString("IDS_SC_INFODESCLINE3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playing tracks:.
        /// </summary>
        internal static string IDS_SC_INFODESCLINE4 {
            get {
                return ResourceManager.GetString("IDS_SC_INFODESCLINE4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sound Control 3.x.
        /// </summary>
        internal static string IDS_SC_NAME_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_SC_NAME_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sound Control 4.0.
        /// </summary>
        internal static string IDS_SC_NAME_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_SC_NAME_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sound Control 5.0.
        /// </summary>
        internal static string IDS_SC_NAME_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_SC_NAME_AGENT3", resourceCulture);
            }
        }
    }
}
