//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Polycode.NostalgicPlayer.Agent.ModuleConverter.ModuleConverter {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Polycode.NostalgicPlayer.Agent.ModuleConverter.ModuleConverter.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find archive entry ({0}).
        /// </summary>
        internal static string IDS_ERR_ENTRY_NOT_FOUND {
            get {
                return ResourceManager.GetString("IDS_ERR_ENTRY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End-of-file reached before end mark.
        /// </summary>
        internal static string IDS_ERR_LOADING_EOF_REACHED {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_EOF_REACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t load external sample with name {0}. Make sure you have an Instruments, Synthsounds and Hybrids folders in the same folder as the module, which have all needed samples and synthsounds.
        /// </summary>
        internal static string IDS_ERR_LOADING_EXTERNAL_SAMPLE {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_EXTERNAL_SAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the module header.
        /// </summary>
        internal static string IDS_ERR_LOADING_HEADER {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_HEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the instrument information.
        /// </summary>
        internal static string IDS_ERR_LOADING_INSTRUMENTS {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_INSTRUMENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found data block without a music block.
        /// </summary>
        internal static string IDS_ERR_LOADING_NO_MUSIC_BLOCK {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_NO_MUSIC_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the pattern information.
        /// </summary>
        internal static string IDS_ERR_LOADING_PATTERNS {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_PATTERNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the sample information.
        /// </summary>
        internal static string IDS_ERR_LOADING_SAMPLEINFO {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_SAMPLEINFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the sample data.
        /// </summary>
        internal static string IDS_ERR_LOADING_SAMPLES {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_SAMPLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the track information.
        /// </summary>
        internal static string IDS_ERR_LOADING_TRACKS {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_TRACKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t read the waveform.
        /// </summary>
        internal static string IDS_ERR_LOADING_WAVEFORM {
            get {
                return ResourceManager.GetString("IDS_ERR_LOADING_WAVEFORM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Written by Thomas Neumann.
        ///
        ///Converts different module formats (mostly Amiga formats) to another format NostalgicPlayer understands.
        ///
        ///Current version can convert these formats:
        ///
        ///Epic Games UMX ➜ Whatever format inside
        ///Fred Editor (Final) ➜ Fred Editor
        ///Future Composer 1.0 - 1.3 ➜ Future Composer 1.4
        ///MED 2.10 (MED4) ➜ MED 2.10 (MMD0)
        ///SC68 ➜ Whatever format inside
        ///Sonic Arranger (Final) ➜ Sonic Arranger
        ///SoundFX 1.x ➜ SoundFX 2.0.
        /// </summary>
        internal static string IDS_MODCONV_DESCRIPTION {
            get {
                return ResourceManager.GetString("IDS_MODCONV_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by SuperSero.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This is an old format from the Amiga. It was developed by Jochen Hippel and he used it to compose some of his game music, such as &quot;Rings of Medusa&quot; and &quot;Shaolin&quot;. A lot of cracker intros used this format in the early days, so you can find a lot of modules in this format on the internet..
        /// </summary>
        internal static string IDS_MODCONV_DESCRIPTION_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_DESCRIPTION_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Linel Software.
        ///Converted to C# by Thomas Neumann.
        ///
        ///The SoundFX file format is like SoundTracker. It only have a few effects, but it also have some special pattern commands, which SoundTracker doesn&apos;t have..
        /// </summary>
        internal static string IDS_MODCONV_DESCRIPTION_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_DESCRIPTION_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Frederic Hahn &amp; Julien Clermonte.
        ///Converted to C# by Thomas Neumann.
        ///
        ///Previously this music format has been known as &apos;Fredmon&apos; or &apos;Fred Monitor&apos; which is wrong.
        ///
        ///The modules contain the player in 68000 assembler in the beginning of the files, but this player will extract the music data and only use that..
        /// </summary>
        internal static string IDS_MODCONV_DESCRIPTION_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_DESCRIPTION_AGENT3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by Teijo Kinnunen.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This player plays modules created with MED v2.10 to MED v3.22. This format have both a real module format, where song data and samples are combined into a single file and song+sample format. The player can load both types of files. For song+sample format, you need to have the samples beside the song files. The player will load the samples from a folder named &quot;Instruments&quot;, synth sounds from a folder named &quot;Synthsounds&quot; and hybrid samp [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IDS_MODCONV_DESCRIPTION_AGENT4 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_DESCRIPTION_AGENT4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This converter is based on the code for LibXmp.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This converter recognizes the modules in “umx” files from games like “Unreal”, “DeusEx”, etc. To NostalgicPlayer, UMX is just a container and the real music format may be one of “ScreamTracker 3”, “Impulse Tracker”, “FastTracker 2”, or possibly a “ProTracker” compatible one..
        /// </summary>
        internal static string IDS_MODCONV_DESCRIPTION_AGENT5 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_DESCRIPTION_AGENT5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Format by Benjamin Gerard.
        ///Written by Thomas Neumann.
        ///
        ///This converter recognizes SC68 modules. SC68 is a free open source project that intends to play musics originally designed for Atari ST and Amiga computers. It is a container format, that just wrap the original module.
        ///
        ///This converter will extract the module and then hope there exists a player which can handle it. Note that there are not players for all SC68 formats yet, so don&apos;t be surprised if you find a file which can not be played..
        /// </summary>
        internal static string IDS_MODCONV_DESCRIPTION_AGENT6a {
            get {
                return ResourceManager.GetString("IDS_MODCONV_DESCRIPTION_AGENT6a", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Written by Thomas Neumann.
        ///
        ///SC68 modules can contain several modules in one file. To support this, they are treated as achives with each module as an entry in the archive..
        /// </summary>
        internal static string IDS_MODCONV_DESCRIPTION_AGENT6b {
            get {
                return ResourceManager.GetString("IDS_MODCONV_DESCRIPTION_AGENT6b", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original player by BrainTrace Design.
        ///Converted to C# by Thomas Neumann.
        ///
        ///This is the successor of InStereo! and Synthesis editors. The file format is the same as InStereo! 2.0, but changed a little bit.
        ///
        ///The synthesis sounds has improved a little bit from what InStereo! 2.0 could do. The special synthesis effects from the Synthesis format has also been incorporated, so you can say, that Sonic Arranger is a fusion between InStereo! 2.0 and Synthesis.
        ///
        ///The modules contain the player in 68000 assembler [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IDS_MODCONV_DESCRIPTION_AGENT7 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_DESCRIPTION_AGENT7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module Converter.
        /// </summary>
        internal static string IDS_MODCONV_NAME {
            get {
                return ResourceManager.GetString("IDS_MODCONV_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Future Composer 1.0 - 1.3.
        /// </summary>
        internal static string IDS_MODCONV_NAME_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_NAME_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SoundFX 1.x.
        /// </summary>
        internal static string IDS_MODCONV_NAME_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_NAME_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fred Editor (Final).
        /// </summary>
        internal static string IDS_MODCONV_NAME_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_NAME_AGENT3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MED 2.10 (MED4).
        /// </summary>
        internal static string IDS_MODCONV_NAME_AGENT4 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_NAME_AGENT4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Epic Games UMX.
        /// </summary>
        internal static string IDS_MODCONV_NAME_AGENT5 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_NAME_AGENT5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SC68.
        /// </summary>
        internal static string IDS_MODCONV_NAME_AGENT6a {
            get {
                return ResourceManager.GetString("IDS_MODCONV_NAME_AGENT6a", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SC68.
        /// </summary>
        internal static string IDS_MODCONV_NAME_AGENT6b {
            get {
                return ResourceManager.GetString("IDS_MODCONV_NAME_AGENT6b", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sonic Arranger (Final).
        /// </summary>
        internal static string IDS_MODCONV_NAME_AGENT7 {
            get {
                return ResourceManager.GetString("IDS_MODCONV_NAME_AGENT7", resourceCulture);
            }
        }
    }
}
