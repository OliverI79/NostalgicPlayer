<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IDS_ERR_ENTRY_NOT_FOUND" xml:space="preserve">
    <value>Could not find archive entry ({0})</value>
  </data>
  <data name="IDS_ERR_LOADING_EOF_REACHED" xml:space="preserve">
    <value>End-of-file reached before end mark</value>
  </data>
  <data name="IDS_ERR_LOADING_EXTERNAL_SAMPLE" xml:space="preserve">
    <value>Can't load external sample with name {0}. Make sure you have an Instruments, Synthsounds and Hybrids folders in the same folder as the module, which have all needed samples and synthsounds</value>
  </data>
  <data name="IDS_ERR_LOADING_HEADER" xml:space="preserve">
    <value>Can't read the module header</value>
  </data>
  <data name="IDS_ERR_LOADING_INSTRUMENTS" xml:space="preserve">
    <value>Can't read the instrument information</value>
  </data>
  <data name="IDS_ERR_LOADING_NO_MUSIC_BLOCK" xml:space="preserve">
    <value>Found data block without a music block</value>
  </data>
  <data name="IDS_ERR_LOADING_PATTERNS" xml:space="preserve">
    <value>Can't read the pattern information</value>
  </data>
  <data name="IDS_ERR_LOADING_SAMPLEINFO" xml:space="preserve">
    <value>Can't read the sample information</value>
  </data>
  <data name="IDS_ERR_LOADING_SAMPLES" xml:space="preserve">
    <value>Can't read the sample data</value>
  </data>
  <data name="IDS_ERR_LOADING_TRACKS" xml:space="preserve">
    <value>Can't read the track information</value>
  </data>
  <data name="IDS_ERR_LOADING_WAVEFORM" xml:space="preserve">
    <value>Can't read the waveform</value>
  </data>
  <data name="IDS_MODCONV_DESCRIPTION" xml:space="preserve">
    <value>Written by Thomas Neumann.

Converts different module formats (mostly Amiga formats) to another format NostalgicPlayer understands.

Current version can convert these formats:

Epic Games UMX ➜ Whatever format inside
Fred Editor (Final) ➜ Fred Editor
Future Composer 1.0 - 1.3 ➜ Future Composer 1.4
MED 2.10 (MED4) ➜ MED 2.10 (MMD0)
SC68 ➜ Whatever format inside
Sonic Arranger (Final) ➜ Sonic Arranger
SoundFX 1.x ➜ SoundFX 2.0</value>
  </data>
  <data name="IDS_MODCONV_DESCRIPTION_AGENT1" xml:space="preserve">
    <value>Original player by SuperSero.
Converted to C# by Thomas Neumann.

This is an old format from the Amiga. It was developed by Jochen Hippel and he used it to compose some of his game music, such as "Rings of Medusa" and "Shaolin". A lot of cracker intros used this format in the early days, so you can find a lot of modules in this format on the internet.</value>
  </data>
  <data name="IDS_MODCONV_DESCRIPTION_AGENT2" xml:space="preserve">
    <value>Original player by Linel Software.
Converted to C# by Thomas Neumann.

The SoundFX file format is like SoundTracker. It only have a few effects, but it also have some special pattern commands, which SoundTracker doesn't have.</value>
  </data>
  <data name="IDS_MODCONV_DESCRIPTION_AGENT3" xml:space="preserve">
    <value>Original player by Frederic Hahn &amp; Julien Clermonte.
Converted to C# by Thomas Neumann.

Previously this music format has been known as 'Fredmon' or 'Fred Monitor' which is wrong.

The modules contain the player in 68000 assembler in the beginning of the files, but this player will extract the music data and only use that.</value>
  </data>
  <data name="IDS_MODCONV_DESCRIPTION_AGENT4" xml:space="preserve">
    <value>Original player by Teijo Kinnunen.
Converted to C# by Thomas Neumann.

This player plays modules created with MED v2.10 to MED v3.22. This format have both a real module format, where song data and samples are combined into a single file and song+sample format. The player can load both types of files. For song+sample format, you need to have the samples beside the song files. The player will load the samples from a folder named "Instruments", synth sounds from a folder named "Synthsounds" and hybrid samples in a folder named "Hybrids". All folders should be placed in the same folder as the song files.</value>
  </data>
  <data name="IDS_MODCONV_DESCRIPTION_AGENT5" xml:space="preserve">
    <value>This converter is based on the code for LibXmp.
Converted to C# by Thomas Neumann.

This converter recognizes the modules in “umx” files from games like “Unreal”, “DeusEx”, etc. To NostalgicPlayer, UMX is just a container and the real music format may be one of “ScreamTracker 3”, “Impulse Tracker”, “FastTracker 2”, or possibly a “ProTracker” compatible one.</value>
  </data>
  <data name="IDS_MODCONV_DESCRIPTION_AGENT6a" xml:space="preserve">
    <value>Format by Benjamin Gerard.
Written by Thomas Neumann.

This converter recognizes SC68 modules. SC68 is a free open source project that intends to play musics originally designed for Atari ST and Amiga computers. It is a container format, that just wrap the original module.

This converter will extract the module and then hope there exists a player which can handle it. Note that there are not players for all SC68 formats yet, so don't be surprised if you find a file which can not be played.</value>
  </data>
  <data name="IDS_MODCONV_DESCRIPTION_AGENT6b" xml:space="preserve">
    <value>Written by Thomas Neumann.

SC68 modules can contain several modules in one file. To support this, they are treated as achives with each module as an entry in the archive.</value>
  </data>
  <data name="IDS_MODCONV_DESCRIPTION_AGENT7" xml:space="preserve">
    <value>Original player by BrainTrace Design.
Converted to C# by Thomas Neumann.

This is the successor of InStereo! and Synthesis editors. The file format is the same as InStereo! 2.0, but changed a little bit.

The synthesis sounds has improved a little bit from what InStereo! 2.0 could do. The special synthesis effects from the Synthesis format has also been incorporated, so you can say, that Sonic Arranger is a fusion between InStereo! 2.0 and Synthesis.

The modules contain the player in 68000 assembler in the beginning of the files, but this player will extract the music data and only use that.</value>
  </data>
  <data name="IDS_MODCONV_NAME" xml:space="preserve">
    <value>Module Converter</value>
  </data>
  <data name="IDS_MODCONV_NAME_AGENT1" xml:space="preserve">
    <value>Future Composer 1.0 - 1.3</value>
  </data>
  <data name="IDS_MODCONV_NAME_AGENT2" xml:space="preserve">
    <value>SoundFX 1.x</value>
  </data>
  <data name="IDS_MODCONV_NAME_AGENT3" xml:space="preserve">
    <value>Fred Editor (Final)</value>
  </data>
  <data name="IDS_MODCONV_NAME_AGENT4" xml:space="preserve">
    <value>MED 2.10 (MED4)</value>
  </data>
  <data name="IDS_MODCONV_NAME_AGENT5" xml:space="preserve">
    <value>Epic Games UMX</value>
  </data>
  <data name="IDS_MODCONV_NAME_AGENT6a" xml:space="preserve">
    <value>SC68</value>
  </data>
  <data name="IDS_MODCONV_NAME_AGENT6b" xml:space="preserve">
    <value>SC68</value>
  </data>
  <data name="IDS_MODCONV_NAME_AGENT7" xml:space="preserve">
    <value>Sonic Arranger (Final)</value>
  </data>
</root>