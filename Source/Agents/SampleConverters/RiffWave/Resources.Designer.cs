//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Polycode.NostalgicPlayer.Agent.SampleConverter.RiffWave {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Polycode.NostalgicPlayer.Agent.SampleConverter.RiffWave.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Created by Thomas Neumann.
        ///
        ///This format is also known as Microsoft wav files (.wav). These files can be in different formats, indicated by an ID number in the .wav file.
        ///
        ///{0}.
        /// </summary>
        internal static string IDS_RIFFWAVE_DESCRIPTION {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This one supports Microsoft PCM (ID: 0x0001) format, which is plain sample files without any compression or encoding..
        /// </summary>
        internal static string IDS_RIFFWAVE_DESCRIPTION_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_DESCRIPTION_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This one supports Microsoft IEEE Float (ID: 0x0003) format, which is plain sample files where each sample are stored as IEEE-754 floating points..
        /// </summary>
        internal static string IDS_RIFFWAVE_DESCRIPTION_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_DESCRIPTION_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This one supports Microsoft ADPCM (ID: 0x0002) format. ADPCM stands for Adaptive Differential Pulse-Code Modulation and is a variant of the Differential Pulse-Code Modulation (DPCM). Each audio data is compressed into 4-bit samples.
        ///
        ///The code is based on SoX (Sound eXchange)..
        /// </summary>
        internal static string IDS_RIFFWAVE_DESCRIPTION_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_DESCRIPTION_AGENT3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of extra header information ({0} bytes) does not match with the length the format require.
        /// </summary>
        internal static string IDS_RIFFWAVE_ERR_EXTRAHEADER {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_ERR_EXTRAHEADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of bits ({0}) in the sample is not supported.
        /// </summary>
        internal static string IDS_RIFFWAVE_ERR_INVALIDBITSIZE {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_ERR_INVALIDBITSIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There isn&apos;t any sound data chunk (data chunk) in the file.
        /// </summary>
        internal static string IDS_RIFFWAVE_ERR_NODATA {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_ERR_NODATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There isn&apos;t any extra sound information (fact chunk) in the file.
        /// </summary>
        internal static string IDS_RIFFWAVE_ERR_NOFACT {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_ERR_NOFACT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There isn&apos;t any sound information (fmt chunk) in the file.
        /// </summary>
        internal static string IDS_RIFFWAVE_ERR_NOFMT {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_ERR_NOFMT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RIFF-WAVE.
        /// </summary>
        internal static string IDS_RIFFWAVE_NAME {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RIFF-WAVE (PCM).
        /// </summary>
        internal static string IDS_RIFFWAVE_NAME_AGENT1 {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_NAME_AGENT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RIFF-WAVE (IEEE Float).
        /// </summary>
        internal static string IDS_RIFFWAVE_NAME_AGENT2 {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_NAME_AGENT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RIFF-WAVE (ADPCM).
        /// </summary>
        internal static string IDS_RIFFWAVE_NAME_AGENT3 {
            get {
                return ResourceManager.GetString("IDS_RIFFWAVE_NAME_AGENT3", resourceCulture);
            }
        }
    }
}
