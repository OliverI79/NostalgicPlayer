/******************************************************************************/
/* This source, or parts thereof, may be used in any software as long the     */
/* license of NostalgicPlayer is keep. See the LICENSE file for more          */
/* information.                                                               */
/******************************************************************************/
namespace Polycode.NostalgicPlayer.Agent.Player.ModTracker
{
	/// <summary>
	/// Different tables needed
	/// </summary>
	internal static class Tables
	{
		/********************************************************************/
		/// <summary>
		/// Periods
		/// </summary>
		/********************************************************************/
		public static readonly ushort[,] Periods =
		{
			// Tuning 0, normal
			{
				 856,  808,  762,  720,  678,  640,  604,  570,  538,  508,  480,  453,
				 428,  404,  381,  360,  339,  320,  302,  285,  269,  254,  240,  226,
				 214,  202,  190,  180,  170,  160,  151,  143,  135,  127,  120,  113
			},

			// Tuning 1
			{
				 850,  802,  757,  715,  674,  637,  601,  567,  535,  505,  477,  450,
				 425,  401,  379,  357,  337,  318,  300,  284,  268,  253,  239,  225,
				 213,  201,  189,  179,  169,  159,  150,  142,  134,  126,  119,  113
			},

			// Tuning 2
			{
				 844,  796,  752,  709,  670,  632,  597,  563,  532,  502,  474,  447,
				 422,  398,  376,  355,  335,  316,  298,  282,  266,  251,  237,  224,
				 211,  199,  188,  177,  167,  158,  149,  141,  133,  125,  118,  112
			},

			// Tuning 3
			{
				 838,  791,  746,  704,  665,  628,  592,  559,  528,  498,  470,  444,
				 419,  395,  373,  352,  332,  314,  296,  280,  264,  249,  235,  222,
				 209,  198,  187,  176,  166,  157,  148,  140,  132,  125,  118,  111
			},

			// Tuning 4
			{
				 832,  785,  741,  699,  660,  623,  588,  555,  524,  495,  467,  441,
				 416,  392,  370,  350,  330,  312,  294,  278,  262,  247,  233,  220,
				 208,  196,  185,  175,  165,  156,  147,  139,  131,  124,  117,  110
			},

			// Tuning 5
			{
				 826,  779,  736,  694,  655,  619,  584,  551,  520,  491,  463,  437,
				 413,  390,  368,  347,  328,  309,  292,  276,  260,  245,  232,  219,
				 206,  195,  184,  174,  164,  155,  146,  138,  130,  123,  116,  109
			},

			// Tuning 6
			{
				 820,  774,  730,  689,  651,  614,  580,  547,  516,  487,  460,  434,
				 410,  387,  365,  345,  325,  307,  290,  274,  258,  244,  230,  217,
				 205,  193,  183,  172,  163,  154,  145,  137,  129,  122,  115,  109
			},

			// Tuning 7
			{
				 814,  768,  725,  684,  646,  610,  575,  543,  513,  484,  457,  431,
				 407,  384,  363,  342,  323,  305,  288,  272,  256,  242,  228,  216,
				 204,  192,  181,  171,  161,  152,  144,  136,  128,  121,  114,  108
			},

			// Tuning -8
			{
				 907,  856,  808,  762,  720,  678,  640,  604,  570,  538,  508,  480,
				 453,  428,  404,  381,  360,  339,  320,  302,  285,  269,  254,  240,
				 226,  214,  202,  190,  180,  170,  160,  151,  143,  135,  127,  120
			},

			// Tuning -7
			{
				 900,  850,  802,  757,  715,  675,  636,  601,  567,  535,  505,  477,
				 450,  425,  401,  379,  357,  337,  318,  300,  284,  268,  253,  238,
				 225,  212,  200,  189,  179,  169,  159,  150,  142,  134,  126,  119
			},

			// Tuning -6
			{
				 894,  844,  796,  752,  709,  670,  632,  597,  563,  532,  502,  474,
				 447,  422,  398,  376,  355,  335,  316,  298,  282,  266,  251,  237,
				 223,  211,  199,  188,  177,  167,  158,  149,  141,  133,  125,  118
			},

			// Tuning -5
			{
				 887,  838,  791,  746,  704,  665,  628,  592,  559,  528,  498,  470,
				 444,  419,  395,  373,  352,  332,  314,  296,  280,  264,  249,  235,
				 222,  209,  198,  187,  176,  166,  157,  148,  140,  132,  125,  118
			},

			// Tuning -4
			{
				 881,  832,  785,  741,  699,  660,  623,  588,  555,  524,  494,  467,
				 441,  416,  392,  370,  350,  330,  312,  294,  278,  262,  247,  233,
				 220,  208,  196,  185,  175,  165,  156,  147,  139,  131,  123,  117
			},

			// Tuning -3
			{
				 875,  826,  779,  736,  694,  655,  619,  584,  551,  520,  491,  463,
				 437,  413,  390,  368,  347,  328,  309,  292,  276,  260,  245,  232,
				 219,  206,  195,  184,  174,  164,  155,  146,  138,  130,  123,  116
			},

			// Tuning -2
			{
				 868,  820,  774,  730,  689,  651,  614,  580,  547,  516,  487,  460,
				 434,  410,  387,  365,  345,  325,  307,  290,  274,  258,  244,  230,
				 217,  205,  193,  183,  172,  163,  154,  145,  137,  129,  122,  115
			},

			// Tuning -1
			{
				 862,  814,  768,  725,  684,  646,  610,  575,  543,  513,  484,  457,
				 431,  407,  384,  363,  342,  323,  305,  288,  272,  256,  242,  228,
				 216,  203,  192,  181,  171,  161,  152,  144,  136,  128,  121,  114
			}
		};



		/********************************************************************/
		/// <summary>
		/// Vibrato
		/// </summary>
		/********************************************************************/
		public static readonly byte[] VibratoTable =
		[
			  0,  24,  49,  74,  97, 120, 141, 161,
			180, 197, 212, 224, 235, 244, 250, 253,
			255, 253, 250, 244, 235, 224, 212, 197,
			180, 161, 141, 120,  97,  74,  49,  24
		];



		/********************************************************************/
		/// <summary>
		/// Funk
		/// </summary>
		/********************************************************************/
		public static readonly byte[] FunkTable =
		[
			0, 5, 6, 7, 8, 10, 11, 13, 16, 19, 22, 26, 32, 43, 64, 128
		];



		/********************************************************************/
		/// <summary>
		/// Mega arpeggios
		/// </summary>
		/********************************************************************/
		public static readonly byte[,] MegaArps =
		{
			{ 0, 3, 7, 12, 15, 12, 7, 3, 0, 3, 7, 12, 15, 12, 7, 3 },
			{ 0, 4, 7, 12, 16, 12, 7, 4, 0, 4, 7, 12, 16, 12, 7, 4 },
			{ 0, 3, 8, 12, 15, 12, 8, 3, 0, 3, 8, 12, 15, 12, 8, 3 },
			{ 0, 4, 8, 12, 16, 12, 8, 4, 0, 4, 8, 12, 16, 12, 8, 4 },
			{ 0, 5, 8, 12, 17, 12, 8, 5, 0, 5, 8, 12, 17, 12, 8, 5 },
			{ 0, 5, 9, 12, 17, 12, 9, 5, 0, 5, 9, 12, 17, 12, 9, 5 },
			{ 12, 0, 7, 0, 3, 0, 7, 0, 12, 0, 7, 0, 3, 0, 7, 0 },
			{ 12, 0, 7, 0, 4, 0, 7, 0, 12, 0, 7, 0, 4, 0, 7, 0 },

			{ 0, 3, 7, 3, 7, 12, 7, 12, 15, 12, 7, 12, 7, 3, 7, 3 },
			{ 0, 4, 7, 4, 7, 12, 7, 12, 16, 12, 7, 12, 7, 4, 7, 4 },
			{ 31, 27, 24, 19, 15, 12, 7, 3, 0, 3, 7, 12, 15, 19, 24, 27 },
			{ 31, 28, 24, 19, 16, 12, 7, 4, 0, 4, 7, 12, 16, 19 ,24, 28 },
			{ 0, 12, 0, 12, 0, 12, 0, 12, 0, 12, 0, 12, 0, 12, 0, 12 },
			{ 0, 12, 24, 12, 0, 12, 24, 12, 0, 12, 24, 12, 0, 12, 24, 12 },
			{ 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3 },
			{ 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4 }
		};



		/********************************************************************/
		/// <summary>
		/// AM waveforms
		/// </summary>
		/********************************************************************/
		public static readonly sbyte[][] AmWaveforms =
		{
			new sbyte[]
			{
				   0,   25,   49,   71,   90,  106,  117,  125,
				 127,  125,  117,  106,   90,   71,   49,   25,
				   0, - 25, - 49, - 71, - 90, -106, -117, -125,
				-127, -125, -117, -106, - 90, - 71, - 49, - 25
			},

			new sbyte[]
			{
				-128, -120, -112, -104, - 96, - 88, - 80, - 72,
				- 64, - 56, - 48, - 40, - 32, - 24, - 16, -  8,
				   0,    8,   16,   24,   32,   40,   48,   56,
				  64,   72,   80,   88,   96,  104,  112,  120
			},

			new sbyte[]
			{
				-128, -128, -128, -128, -128, -128, -128, -128,
				-128, -128, -128, -128, -128, -128, -128, -128,
				 127,  127,  127,  127,  127,  127,  127,  127,
				 127,  127,  127,  127,  127,  127,  127,  127
			},

			new sbyte[]
			{
				   0,    0,    0,    0,    0,    0,    0,    0,
			       0,    0,    0,    0,    0,    0,    0,    0,
			       0,    0,    0,    0,    0,    0,    0,    0,
			       0,    0,    0,    0,    0,    0,    0,    0
			}
		};



		/********************************************************************/
		/// <summary>
		/// AM sinus
		/// </summary>
		/********************************************************************/
		public static readonly byte[] AmSinus =
		[
			  0,   2,   4,   6,   8,  11,  13,  15,
			 17,  20,  22,  24,  26,  28,  30,  33,
			 35,  37,  39,  41,  43,  45,  47,  50,
			 52,  54,  56,  58,  60,  62,  63,  65,
			 67,  69,  71,  73,  75,  77,  78,  80,
			 82,  83,  85,  87,  88,  90,  92,  93,
			 95,  96,  98,  99, 100, 102, 103, 104,
			106, 107, 108, 109, 110, 111, 113, 114,
			115, 116, 116, 117, 118, 119, 120, 121,
			121, 122, 123, 123, 124, 124, 125, 125,
			126, 126, 126, 127, 127, 127, 127, 127,
			127, 127, 128, 127, 127, 127, 127, 127,
			127, 127, 126, 126, 126, 125, 125, 124,
			124, 123, 123, 122, 121, 121, 120, 119,
			118, 117, 116, 115, 114, 113, 111, 110,
			109, 108, 107, 106, 104, 103, 102, 100,
			 99,  98,  96,  95,  93,  92,  90,  88,
			 87,  85,  83,  82,  80,  78,  77,  75,
			 73,  71,  69,  67,  65,  63,  62,  60,
			 58,  56,  54,  52,  50,  47,  45,  43,
			 41,  39,  37,  35,  33,  30,  28,  26,
			 24,  22,  20,  17,  15,  13,  11,   8,
			  6,   4,   2,   0
		];
	}
}
